/*
 * Desarrollar un programa o programas que simulen lo siguiente:
1 Gestión de memoria:
a. Reubicación contigua simple
b. Particiones estáticas un sólo tamaño
c. Particiones estáticas de varios tamaños
d. Particiones dinámicas.
e. Segmentación
f. Paginación  
Comparar y medir la fragmentaciòn después de terminar la ubicación de los archivos en memoria
http://sistemasopers.blogspot.com/2015/09/particiones-fijas-y-dinamicas.html
 */
package gestiondememoria;

import java.awt.Color;
import java.awt.Font;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Omar Beltrán
 * RCS Reubicación Contigua Simple
 */
public final class GestionMemoria extends javax.swing.JFrame {
    private int blockSize;
    private boolean isDinamic = false;
    private boolean isStatic = false;
    private static int dinamicIndex = 0;
    private static final int startX = 5;
    private static final int startY = 110;
    private static final int SIZE = 27;
    private static final int LIMSUP = SIZE;
    private static int startDinamicX = startX;
    private static final int startDinamicY = startY;
    private static final int LIMINF = 0;
    private int nProcess;
    private Color color;
    private JLabel[] staticPartition = new JLabel[SIZE];
    private JLabel[] dinamicPartition = new JLabel[SIZE];
    private boolean isFree[] = new boolean[SIZE];
    private int maxWidth;
    /**
     * Creates new form NewJFrame
     */
    public GestionMemoria() {
        initComponents();
        this.setTitle("Reubicación contigua simple");
        setLocationRelativeTo(this);
        blockSize = 10;
        nProcess = 1;
        jTextArea1.append("Tamaño de bloque "+blockSize+" Kb\n");
        initIsFree();
        maxWidth = this.getWidth();
        //createStaticLabel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuAction = new javax.swing.JMenu();
        jMenuAddProcess = new javax.swing.JMenuItem();
        jMenuRelocation = new javax.swing.JMenuItem();
        jMenuSPSV = new javax.swing.JMenuItem();
        jMenuItemSPMV = new javax.swing.JMenuItem();
        jMenuClearAll = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();
        jMenuConfiguration = new javax.swing.JMenu();
        jMenuBlockSize = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemCredits = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1110, 260));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        jMenuAction.setText("Actions");

        jMenuAddProcess.setText("Add Process");
        jMenuAddProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAddProcessActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuAddProcess);

        jMenuRelocation.setText("Apply Relocation");
        jMenuRelocation.setActionCommand("Apply Contiguos Relocation");
        jMenuRelocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRelocationActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuRelocation);

        jMenuSPSV.setLabel("Static Partition Single Value");
        jMenuSPSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSPSVActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuSPSV);

        jMenuItemSPMV.setLabel("Static Partition Multi Value");
        jMenuItemSPMV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSPMVActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuItemSPMV);

        jMenuClearAll.setText("Reset");
        jMenuClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuClearAllActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuClearAll);

        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuExit);

        jMenuBar1.add(jMenuAction);

        jMenuConfiguration.setText("Configuration");

        jMenuBlockSize.setText("Block Size");
        jMenuBlockSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuBlockSizeActionPerformed(evt);
            }
        });
        jMenuConfiguration.add(jMenuBlockSize);

        jMenuBar1.add(jMenuConfiguration);

        jMenuHelp.setText("Help");

        jMenuItemCredits.setText("Credits");
        jMenuItemCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCreditsActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemCredits);

        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1081, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(96, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuAddProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAddProcessActionPerformed
        if (blockSize == 0) {
            JOptionPane.showMessageDialog(null,"El tamaño de bloque no puede ser 0","ERROR",JOptionPane.ERROR_MESSAGE);
        }
        else {
            int fileSize = Integer.parseInt(JOptionPane.showInputDialog("Enter process size Kb"));
            double start = getStartFileBlock(fileSize);
            if (start != -1) {
                double end = getFinalFileBlock(start, fileSize);
                jTextArea1.append("Proceso "+nProcess+" -->  Tamaño: "+fileSize+", Bloque inicio "+(int)start+
                    ", Bloque final "+(int)end+"\n");
                nProcess++;
                paintBlocks((int)start, (int)end, getColor(nProcess));
            }
            else {
                JOptionPane.showMessageDialog(null,"No hay espacio para cargar el proceso","ERROR",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuAddProcessActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        System.exit(1);
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jMenuBlockSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuBlockSizeActionPerformed
        int blockSizeTmp = Integer.parseInt(JOptionPane.showInputDialog("Enter Block Size Kb"));
        if (blockSizeTmp > 0) {
            blockSize = blockSizeTmp;
        }
        else {
            JOptionPane.showMessageDialog(null,"El tamaño de bloque debe ser mayor que 0","ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuBlockSizeActionPerformed

    private void jMenuItemCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreditsActionPerformed
        JOptionPane.showMessageDialog(null,"Este programa fué desarrollado y diseñado por Omar José Beltrán Rodríguez","Creditos",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemCreditsActionPerformed

    private void jMenuClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuClearAllActionPerformed
        paintBlocks(LIMINF, LIMSUP, Color.WHITE);
        initIsFree();
        nProcess = 1;
    }//GEN-LAST:event_jMenuClearAllActionPerformed

    private void jMenuRelocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRelocationActionPerformed
        contiguosRelocation();
    }//GEN-LAST:event_jMenuRelocationActionPerformed

    private void jMenuSPSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSPSVActionPerformed
        if (blockSize == 0) {
            JOptionPane.showMessageDialog(null,"El tamaño de bloque debe ser mayor que 0","ERROR",JOptionPane.ERROR_MESSAGE);
        }
        else {
            createStaticLabel();
            isStatic = true;
            isDinamic = false;
        }
    }//GEN-LAST:event_jMenuSPSVActionPerformed

    private void jMenuItemSPMVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSPMVActionPerformed
        int partitionSize = Integer.parseInt(JOptionPane.showInputDialog("Enter process size Kb"));
        createDinamicLabel(partitionSize);
        isDinamic = true;
        isStatic = false;
    }//GEN-LAST:event_jMenuItemSPMVActionPerformed

    private void contiguosRelocation() {
        int indexNextProcess, indexBegin;
        for(int index = 0; index < LIMSUP; index++) {
            if( isFreePartition(index)) {
                indexNextProcess = findNextProcess(index);
                if (indexNextProcess != -1) {
                    color = staticPartition[indexNextProcess].getBackground();
                    indexBegin = relocateProcess(index, indexNextProcess);
                    index = indexBegin-1;
                }    
            }
        }
    }
    
    private int relocateProcess(int destination, int source) {
        int length = getProcessLength(source);
        int start = destination;
        paintBlocks(start, (start+length)-1, color);
        if ((start+length)-1 > source)
            paintBlocks(start+length, (source+length)-1);
        else    
            paintBlocks(source, (source+length)-1);
        return start+length;
    }
      
    private void setIsFree(int start, int end, boolean value) {
        for (int index = start ; index < end ; index++) {
            isFree[index]= value;
        }
    }
    
    private int getProcessLength(int index) {
        int lenght = 1;
        for (int index2 = index+1; index2 < LIMSUP; index2++) {
            if(staticPartition[index].getBackground() == staticPartition[index2].getBackground()) {
                lenght++;
            }
            else {
                index2=LIMSUP+1;
            }    
        }    
        return lenght;
    }
    
    private int findNextProcess(int index) {
        int indexProcess = -1;
        for(; index < LIMSUP; index++) {
           if(!isFreePartition(index)) {
               indexProcess = index;
               index = LIMSUP+1;
           }  
        }
        return indexProcess;
    }
    
    private void memoryPartition() {
        dropStaticLabels();
        createStaticLabel();
    }
    
    private void dropStaticLabels() {
        for(int index=0; index < LIMSUP; index++) {
            this.remove(staticPartition[index]);
        }
        staticPartition = null;
        staticPartition = new JLabel[SIZE];
        isFree = null;
        isFree = new boolean[SIZE];
        initIsFree();
        this.repaint();
    }
    
    private void dropDinamicLabels() {
        if (isDinamic) {
            for(int index=0; index < LIMSUP; index++) {
                this.remove(dinamicPartition[index]);
            }
            dinamicPartition = null;
            dinamicPartition = new JLabel[SIZE];
            this.repaint();
            isDinamic = false;
        }
    }
    
    private void setLabelText() {
        for(int index=0; index < LIMSUP; index++) {
            staticPartition[index].setText(String.valueOf(index*blockSize));
        }
    }
    
    private int getStartFileBlock(int fileSize) {
        int start;
        int trying = 0;
        do{
            start = (int) Math.floor(Math.random() * (LIMSUP-LIMINF + 1) + LIMINF);
            trying++;
            if (trying > 100)
                return -1;
        }while(!isFreeBuffer(start, fileSize));
        
        return start;
    }
    
    private boolean isFreeBuffer(double start, int fileSize) {
        double end = getFinalFileBlock(start, fileSize);
        if (end >= LIMSUP-1)
            return false;
        for (int index = (int)start ; index < end ; index++) {
            if (!isFree[index]) {
                return false;
            }
        }
        return true;
    }
    
    private boolean isFreePartition(int index) { 
        return isFree[index];
    }
    
    private double getFinalFileBlock(double startBlock, double fileSize) {
        double finalPosition = 0;
        finalPosition = (fileSize/blockSize) + (startBlock-1);
        return Math.ceil(finalPosition);
    }
    
    private void paintBlocks(int start, int end, Color color) {
        for (int index = start ; index <= end ; index++) {
            staticPartition[index].setBackground(color);
            isFree[index] = false;
        }
    }
    
    private void paintBlocks(int start, int end) {
        for (int index = start ; index <= end ; index++) {
            staticPartition[index].setBackground(Color.WHITE);
            isFree[index] = true;
        }
    }
    
    private Color getColor(int color) {
        switch (color) {
            case 1:
                return Color.RED;
            case 2:
                return Color.PINK;
            case 3:
                return Color.YELLOW;
            case 4:
                return Color.GREEN;
            case 5:
                return Color.BLUE;
            case 6:
                return Color.CYAN;
            case 7:
                return Color.MAGENTA;
            case 8:
                return Color.ORANGE;
            default:
                return Color.BLACK;
        }
    }
    
    void createStaticLabel() {
        int X = 5, Y = 110, size = 40;
        Font fuente = new Font("Arial", 3, 9);
        for(int index=0; index < LIMSUP; index++) {
            staticPartition[index]= new JLabel("lbl" +index);
            staticPartition[index].setBounds(X, Y, size, 2*size);
            //edit properties
            staticPartition[index].setBorder(BorderFactory.createEtchedBorder(Color.WHITE,Color.LIGHT_GRAY));
            staticPartition[index].setBackground(Color.WHITE);
            staticPartition[index].setText(String.valueOf(index*blockSize));
            staticPartition[index].setFont(fuente);
            staticPartition[index].setOpaque(true);
            staticPartition[index].setHorizontalAlignment(10);
            staticPartition[index].setVerticalAlignment(1);
            staticPartition[index].setHorizontalTextPosition(11);
            staticPartition[index].setVerticalTextPosition(0);
            add(staticPartition[index]);
            X = X+size;
        }
        this.repaint();
    }
    
    void createDinamicLabel(int size) {
        Font fuente = new Font("Arial", 3, 9);
        dinamicPartition[dinamicIndex]= new JLabel("lbl" +dinamicIndex);
        dinamicPartition[dinamicIndex].setBounds(startDinamicX, startDinamicY, size, 80);
        //edit properties
        dinamicPartition[dinamicIndex].setBorder(BorderFactory.createEtchedBorder(Color.WHITE,Color.LIGHT_GRAY));
        dinamicPartition[dinamicIndex].setBackground(Color.WHITE);
        dinamicPartition[dinamicIndex].setText(String.valueOf(startDinamicX-5));
        dinamicPartition[dinamicIndex].setFont(fuente);
        dinamicPartition[dinamicIndex].setOpaque(true);
        dinamicPartition[dinamicIndex].setHorizontalAlignment(10);
        dinamicPartition[dinamicIndex].setVerticalAlignment(1);
        dinamicPartition[dinamicIndex].setHorizontalTextPosition(11);
        dinamicPartition[dinamicIndex].setVerticalTextPosition(0);
        dinamicPartition[dinamicIndex].setVisible(true);
        add(dinamicPartition[dinamicIndex]);
        startDinamicX = startDinamicX+size;
        dinamicIndex++;
        this.repaint();
    }
    
    private void initIsFree() {
        for(int index = 0; index < LIMSUP; index++) {
            isFree[index] = true;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionMemoria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenuAction;
    private javax.swing.JMenuItem jMenuAddProcess;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuBlockSize;
    private javax.swing.JMenuItem jMenuClearAll;
    private javax.swing.JMenu jMenuConfiguration;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemCredits;
    private javax.swing.JMenuItem jMenuItemSPMV;
    private javax.swing.JMenuItem jMenuRelocation;
    private javax.swing.JMenuItem jMenuSPSV;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
